#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <stdbool.h>
#include <stdio.h>

const int SCREEN_WIDTH = 480;
const int SCREEN_HEIGHT = 480;
const int ROWS = 6;
const int COLS = 6;
const float CELL_SIZE = 95.8;
const int INDEX_OFFSET = 20;

SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;

bool **picrossGrid = NULL;

// Prototypes des fonctions
void initializeSDL();
void closeSDL();
void initPicrossGrid();
void freePicrossGrid();
void handleMouseClick(int x, int y);
void render();
void drawGrid();
//void drawIndices();


void initializeSDL() {
    SDL_Init(SDL_INIT_VIDEO);
    TTF_Init();
    gWindow = SDL_CreateWindow("Picross", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
}

void closeSDL() {
    SDL_DestroyRenderer(gRenderer);
    SDL_DestroyWindow(gWindow);
    TTF_Quit();
    SDL_Quit();
}

void initPicrossGrid() {
    picrossGrid = (bool**)malloc(ROWS * sizeof(bool*));
    for (int i = 0; i < ROWS; i++) {
        picrossGrid[i] = (bool*)malloc(COLS * sizeof(bool));
        for (int j = 0; j < COLS; j++) {
            picrossGrid[i][j] = false;
        }
    }
}

void freePicrossGrid() {
    if (picrossGrid != NULL) {
        for (int i = 0; i < ROWS; i++) {
            free(picrossGrid[i]);
        }
        free(picrossGrid);
    }
}

void handleMouseClick(int x, int y) {
    int col = x / CELL_SIZE;
    int row = y / CELL_SIZE;

    // Affichage des coordonnées de clics
    printf("Clic à la position (%d, %d)\n", x , y );
    printf("Correspond à la cellule (%d, %d)\n", row + 1, col + 1);

    // Vérifier si les indices sont dans les limites de la grille
    if (row >= 0 && row < ROWS && col >= 0 && col < COLS) {
        // Inverser l'état de la case (passer de blanc à noir ou vice versa)
        picrossGrid[row][col] = !picrossGrid[row][col];
    }
}

void render() {
    SDL_SetRenderDrawColor(gRenderer, 255, 255, 255, 255);
    SDL_RenderClear(gRenderer);

    // Dessin de la grille
    drawGrid();

    SDL_RenderPresent(gRenderer);
}

void drawGrid() {
    // Dessiner les cases
    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            SDL_Rect cellRect = {j * CELL_SIZE, i * CELL_SIZE, CELL_SIZE, CELL_SIZE};
            if (picrossGrid[i][j]) { // Si la case est cochée, la dessiner en noir
                SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 255); // Noir
            } else {
                SDL_SetRenderDrawColor(gRenderer, 255, 255, 255, 255); // Blanc
            }
            SDL_RenderFillRect(gRenderer, &cellRect);
        }
    }

    // Dessiner les lignes de la grille
    SDL_SetRenderDrawColor(gRenderer, 0, 0, 0, 255); // Couleur noire pour les lignes
    for (int i = 0; i <= ROWS; ++i) {
        SDL_RenderDrawLine(gRenderer, 0, i * CELL_SIZE, SCREEN_WIDTH, i * CELL_SIZE);
    }
    for (int j = 0; j <= COLS; ++j) {
        SDL_RenderDrawLine(gRenderer, j * CELL_SIZE, 0, j * CELL_SIZE, SCREEN_HEIGHT);
    }
}


int main(int argc, char* args[]) {
    initializeSDL();
    initPicrossGrid();

    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
            else if (e.type == SDL_MOUSEBUTTONDOWN) {
                int x, y;
                SDL_GetMouseState(&x, &y);
                handleMouseClick(x, y);
            }
        }
        render();
    }

    freePicrossGrid();
    closeSDL();

    return 0;
}
